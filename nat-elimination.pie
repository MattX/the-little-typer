#lang pie

;; Exercises on using Nat elimiators from Chapter 3 of The Little Typer
;;
;; Some exercises are adapted from assignments at Indiana University

;; Exercise 3.1
;;
;; Define a function called at-least-two? that takes one Nat argument and evaluates to an Atom.
;;
;; at-least-two? evaluates to 't if the Nat is greater than or equal to 2 otherwise it evaluates to 'nil.
;;
;; Note: The only Nat eliminator you should need in the body of at-least-two? is which-Nat.


(claim at-least-two? (-> Nat Atom))

(define at-least-two?
  (lambda (n)
    (which-Nat n
      'nil
      (lambda (n-1)
        (which-Nat n-1
          'nil
          (lambda (_n-2) 't))))))

(check-same Atom (at-least-two? zero) 'nil)
(check-same Atom (at-least-two? (add1 zero)) 'nil)
(check-same Atom (at-least-two? (add1 (add1 zero))) 't)
  

;; Exercise 3.2
;;
;; Rewrite the definition of + (in frame 3.27) using the rec-Nat eliminator instead of the iter-Nat eliminator.

(claim step-+ (-> Nat Nat Nat))

(define step-+
  (lambda (_n +n-1)
    (add1 +n-1)))

(claim + (-> Nat Nat Nat))

(define +
  (lambda (i j)
    (rec-Nat i
      j
      step-+)))

(check-same Nat (+ 0 3) 3)
(check-same Nat (+ 5 6) 11)

;; Exercise 3.3
;;
;; Define a function called exp that takes two Nat arguments and evaluates to a Nat.
;;
;; exp evaluates to the exponentiation, a^b, of the two passed arguments.

;; First, let's define * again.

(claim * (-> Nat Nat Nat))

(define *
  (lambda (i j)
    (iter-Nat i
      0
      (lambda (j*<i-1>) (+ j j*<i-1>)))))

(check-same Nat (* 10 0) 0)
(check-same Nat (* 0 10) 0)
(check-same Nat (* 6 7) 42)

(claim exp (-> Nat Nat Nat))

(define exp
  (lambda (i j)
    (iter-Nat j
      1
      (lambda (i^<j-1>) (* i i^<j-1>)))))

(check-same Nat (exp 1 0) 1)
(check-same Nat (exp 0 0) 1)
(check-same Nat (exp 2 3) 8)
(check-same Nat (exp 3 3) 27)
(check-same Nat (exp 5 3) 125)

;; Exercise 3.4
;;
;; Define a function called max that takes two Nat arguments and evaluates to a Nat.
;;
;; max evaluates to the larger of the two passed arguments.

(claim sub1 (-> Nat Nat))

(define sub1
  (lambda (x)
    (which-Nat x
      0
      (lambda (x-1) x-1))))

(claim - (-> Nat Nat Nat))
(define -
  (lambda (x y)
    (iter-Nat y
      x
      (lambda (x-1) (sub1 x-1)))))

(check-same Nat (- 4 2) 2)
(check-same Nat (- 2 4) 0)
(check-same Nat (- 10 5) 5)

(claim max (-> Nat Nat Nat))

;; recursive definition
;; (lambda (x y) (if (= x 0) y (if (= y 0) x (+ 1 (max (- x 1) (- y 1))))))

(define max
  (lambda (x y)
    (which-Nat (- x y)
      y
      (lambda (_) x))))

(check-same Nat (max 2 3) 3)
(check-same Nat (max 3 2) 3)